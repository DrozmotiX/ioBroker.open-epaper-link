{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\ntype ApConnection = {\n\t[key: string]: {\n\t\tip: string;\n\t\tconnection: WebSocket;\n\t\tconnectionStatus: string;\n\t\tdeviceName: string;\n\t};\n};\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport WebSocket from 'ws';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-expect-error\nconst apConnection: ApConnection = [];\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-expect-error\nimport jsonExplorer from 'iobroker-jsonexplorer'; // Use jsonExplorer library\nimport { stateAttrb } from './lib/objectDefinitions';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass OpenEpaperLink extends utils.Adapter {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'open-epaper-link',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\tthis.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t\tjsonExplorer.init(this, stateAttrb); // Initiate library to handle JSOn data & state creation\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState('info.connection', false, true);\n\n\t\t// Connect to test-device\n\t\tthis.wsConnectionHandler('192.168.10.150');\n\n\t\t// ToDo: Establish connection to all already known devices\n\t\tthis.setState('info.connection', true, true);\n\t}\n\n\tprivate wsConnectionHandler(deviceIP: string): void {\n\t\tapConnection[deviceIP] = {\n\t\t\tconnection: new WebSocket(`ws://${deviceIP}/ws`),\n\t\t\tconnectionStatus: 'Connecting',\n\t\t\tdeviceName: 'testDevice',\n\t\t\tip: deviceIP,\n\t\t};\n\n\t\tapConnection[deviceIP].connection.on('open', () => {\n\t\t\tthis.log.info('Connected to server');\n\t\t\tapConnection[deviceIP].connectionStatus = 'Connected';\n\t\t\t//ToDo: Create Device on connection state and store decide details\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\tthis.extendObject(apConnection[deviceIP].deviceName, {\n\t\t\t\ttype: 'device',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: apConnection[deviceIP].deviceName,\n\t\t\t\t\t// ToDo: @ticaki please assit with TS, value is correct but error shown\n\t\t\t\t\t// statusStates: {\n\t\t\t\t\t// \tonlineId: `${this.namespace}.${apConnection[deviceIP].deviceName}._info._online`,\n\t\t\t\t\t// },\n\t\t\t\t},\n\t\t\t\tnative: {\n\t\t\t\t\tip: apConnection[deviceIP].ip,\n\t\t\t\t},\n\t\t\t});\n\t\t\tthis.extendObject(`${apConnection[deviceIP].deviceName}._info`, {\n\t\t\t\ttype: 'channel',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: 'Connection detail',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tjsonExplorer.stateSetCreate(`${apConnection[deviceIP].deviceName}._info.connected`, 'connected', true);\n\t\t});\n\n\t\tapConnection[deviceIP].connection.on('message', (message: string) => {\n\t\t\t//ToDo: Design messageHandler to write values to states\n\t\t\tthis.log.info(`Received message from server: ${message}`);\n\t\t\tmessage = JSON.parse(message);\n\t\t\tlet modifiedMessage;\n\n\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t// @ts-expect-error\n\t\t\tif (message && message['sys']) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t// @ts-expect-error\n\t\t\t\tmodifiedMessage = message['sys'];\n\t\t\t\tjsonExplorer.traverseJson(modifiedMessage, `${apConnection[deviceIP].deviceName}._info`);\n\t\t\t} else {\n\t\t\t\tmodifiedMessage = message;\n\t\t\t\tjsonExplorer.traverseJson(modifiedMessage, apConnection[deviceIP].deviceName);\n\t\t\t}\n\t\t\tapConnection[deviceIP].connectionStatus = 'Connected';\n\t\t\tjsonExplorer.stateSetCreate(`${apConnection[deviceIP].deviceName}._info.connected`, 'connected', true);\n\n\t\t});\n\n\t\tapConnection[deviceIP].connection.on('close', () => {\n\t\t\tthis.log.info('Disconnected from server');\n\t\t\tapConnection[deviceIP].connectionStatus = 'Disconnected';\n\t\t\tjsonExplorer.stateSetCreate(`${apConnection[deviceIP].deviceName}._info.connected`, 'connected', false);\n\t\t});\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\t// loop truth all connection and close if present\n\t\t\tfor (const ap in apConnection) {\n\t\t\t\t//ToDo: needs to be optimized, just quick & dirty for testing now\n\t\t\t\ttry {\n\t\t\t\t\tapConnection[ap].connection.close();\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// no connection present\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t/**\n\t * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t */\n\tprivate onMessage(obj: ioBroker.Message): void {\n\t\tthis.log.debug('Data from configuration received : ' + JSON.stringify(obj));\n\t\tif (typeof obj === 'object' && obj.message) {\n\t\t\tthis.log.debug('Data from configuration received : ' + JSON.stringify(obj));\n\t\t\t// if (obj.command === 'send') {\n\t\t\t// e.g. send email or pushover or whatever\n\n\t\t\ttry {\n\t\t\t\tswitch (obj.command) {\n\t\t\t\t\t//ToDo previous add function to be removed\n\t\t\t\t\tcase '_addUpdateAP':\n\t\t\t\t\t\t// eslint-disable-next-line no-case-declarations\n\t\t\t\t\t\tconst ipValid = this.validateIPAddress(obj.message['apIP']);\n\t\t\t\t\t\tif (!ipValid) {\n\t\t\t\t\t\t\tthis.log.warn(`You entered an incorrect IP-Address, cannot add device !`);\n\n\t\t\t\t\t\t\tthis.sendTo(\n\t\t\t\t\t\t\t\tobj.from,\n\t\t\t\t\t\t\t\tobj.command,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttype: 'error',\n\t\t\t\t\t\t\t\t\tmessage: 'connection failed',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tobj.callback,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.log.info(`Valid IP address received`);\n\t\t\t\t\t\t\tthis.wsConnectionHandler(obj.message['apIP']);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t//\n\t\t\t\t\tcase 'loadAccessPoints':\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlet data = {};\n\n\t\t\t\t\t\t\tconst tableEntry = [];\n\n\t\t\t\t\t\t\tfor (const device in apConnection) {\n\t\t\t\t\t\t\t\ttableEntry.push({\n\t\t\t\t\t\t\t\t\tapName: apConnection[device].deviceName,\n\t\t\t\t\t\t\t\t\tip: apConnection[device].ip,\n\t\t\t\t\t\t\t\t\tconnectState: apConnection[device].connectionStatus,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdata = {\n\t\t\t\t\t\t\t\tnative: {\n\t\t\t\t\t\t\t\t\taccessPointTable: tableEntry,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tthis.sendTo(obj.from, obj.command, data, obj.callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t//\n\t\t\t\t\t// Front End message handler to load IP-Address dropDown with all current known devices\n\t\t\t\t\tcase 'getApName':\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst dropDownEntry = [];\n\t\t\t\t\t\t\tfor (const device in apConnection) {\n\t\t\t\t\t\t\t\tdropDownEntry.push({\n\t\t\t\t\t\t\t\t\tlabel: apConnection[device].deviceName,\n\t\t\t\t\t\t\t\t\tvalue: apConnection[device].deviceName,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.sendTo(obj.from, obj.command, dropDownEntry, obj.callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'getApIP':\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst dropDownEntry = [];\n\t\t\t\t\t\t\tfor (const device in apConnection) {\n\t\t\t\t\t\t\t\tdropDownEntry.push({\n\t\t\t\t\t\t\t\t\tlabel: apConnection[device].ip,\n\t\t\t\t\t\t\t\t\tvalue: apConnection[device].ip,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.sendTo(obj.from, obj.command, dropDownEntry, obj.callback);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t// Handle front-end messages to delete devices\n\t\t\t\t\t// case 'deleteDevice':\n\t\t\t\t\t// \tthis.messageResponse[obj.message.ip] = obj;\n\t\t\t\t\t// \tif (clientDetails[obj.message.ip]) {\n\t\t\t\t\t// \t\t// Ensure all existing connections are closed, will trigger disconnect event to clean-up memory attributes\n\t\t\t\t\t// \t\tclientDetails[obj.message.ip].client.disconnect();\n\t\t\t\t\t// \t\t// Try to delete Device Object including all underlying states\n\t\t\t\t\t// \t\ttry {\n\t\t\t\t\t// \t\t\tawait this.delObjectAsync(clientDetails[obj.message.ip].deviceName, { recursive: true });\n\t\t\t\t\t// \t\t} catch (e) {\n\t\t\t\t\t// \t\t\t// Deleting device channel failed\n\t\t\t\t\t// \t\t}\n\t\t\t\t\t//\n\t\t\t\t\t// \t\t// Clean memory data\n\t\t\t\t\t// \t\tdelete clientDetails[obj.message.ip];\n\t\t\t\t\t//\n\t\t\t\t\t// \t\t// Send confirmation to frontend\n\t\t\t\t\t// \t\tthis.sendTo(\n\t\t\t\t\t// \t\t\tthis.messageResponse[obj.message.ip].from,\n\t\t\t\t\t// \t\t\tthis.messageResponse[obj.message.ip].command,\n\t\t\t\t\t// \t\t\t{ result: 'OK - Device successfully removed' },\n\t\t\t\t\t// \t\t\tthis.messageResponse[obj.message.ip].callback,\n\t\t\t\t\t// \t\t);\n\t\t\t\t\t// \t\tdelete this.messageResponse[obj.message.ip];\n\t\t\t\t\t// \t} else {\n\t\t\t\t\t// \t\tthis.sendTo(\n\t\t\t\t\t// \t\t\tobj.from,\n\t\t\t\t\t// \t\t\tobj.command,\n\t\t\t\t\t// \t\t\t{\n\t\t\t\t\t// \t\t\t\terror: 'Provided IP-Address unknown, please refresh table and enter an valid IP-Address',\n\t\t\t\t\t// \t\t\t},\n\t\t\t\t\t// \t\t\tobj.callback,\n\t\t\t\t\t// \t\t);\n\t\t\t\t\t// \t\treturn;\n\t\t\t\t\t// \t}\n\t\t\t\t\t//\n\t\t\t\t\t// \t// this.sendTo(obj.from, obj.command, 1, obj.callback);\n\t\t\t\t\t// \tbreak;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// this.errorHandler(`[onMessage]`, error);\n\t\t\t}\n\n\t\t\t// Send response in callback if required\n\t\t\t// if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t\t\t// }\n\t\t}\n\t}\n\n\tprivate validateIPAddress(ipAddress: string): boolean {\n\t\treturn /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\n\t\t\tipAddress,\n\t\t);\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new OpenEpaperLink(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new OpenEpaperLink())();\n}\n"],
  "mappings": "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",
  "names": ["jsonExplorer", "WebSocket"]
}
